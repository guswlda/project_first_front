name: CICD

on:
  push:
    branches:
      - main  # 'main' 브랜치에 push 이벤트 발생 시 워크플로를 트리거합니다.

jobs:
  build:
    runs-on: ubuntu-latest  # 가장 최신의 Ubuntu 러너에서 작업을 실행합니다.
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4  # GitHub 저장소에서 소스 코드를 체크아웃합니다.

      - name: Create .env file
        run: |
          touch .env  # .env 파일을 생성합니다.
          echo "REACT_APP_MAP_API_KEY=${{ secrets.REACT_APP_MAP_API_KEY }}" > .env  # 환경변수를 .env 파일에 씁니다.

      - name: Sign in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub에 로그인합니다.

      - name: Build Docker Image
        run: docker build -t guswlda/planner_front .  # Docker 이미지를 빌드합니다.

      - name: Push Docker Image
        run: docker push guswlda/planner_front:latest  # 빌드된 이미지를 Docker Hub에 푸시합니다.

  deploy:
    needs: build  # 'build' 작업이 성공적으로 완료된 후에 실행됩니다.
    runs-on: ubuntu-latest  # 가장 최신의 Ubuntu 러너에서 작업을 실행합니다.
    permissions:
      contents: read  # 저장소의 내용을 읽을 수 있는 권한을 부여합니다.
      id-token: write  # ID 토큰을 쓸 수 있는 권한을 부여합니다. (Docker 데몬 권한 부여에 필요)
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1  # Docker Buildx를 설정합니다.

      - name: Pull image from Docker Hub
        run: docker pull guswlda/planner_front:latest  # Docker Hub에서 이미지를 가져옵니다.

      - name: Delete existing container
        run: docker rm -f reactContainer  # 기존에 실행 중인 컨테이너를 삭제합니다.

      - name: Run container
        run: docker run -d -p 3001:80 --name reactContainer guswlda/planner_front  # 새 컨테이너를 시작합니다.
